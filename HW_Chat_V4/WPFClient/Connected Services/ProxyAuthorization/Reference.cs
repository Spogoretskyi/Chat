//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFClient.ProxyAuthorization {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyAuthorization.IAuthorizationContract")]
    public interface IAuthorizationContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationContract/Join", ReplyAction="http://tempuri.org/IAuthorizationContract/JoinResponse")]
        string Join(string userName, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationContract/Join", ReplyAction="http://tempuri.org/IAuthorizationContract/JoinResponse")]
        System.Threading.Tasks.Task<string> JoinAsync(string userName, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationContract/AddNewUser", ReplyAction="http://tempuri.org/IAuthorizationContract/AddNewUserResponse")]
        bool AddNewUser(string name, string password, string email, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationContract/AddNewUser", ReplyAction="http://tempuri.org/IAuthorizationContract/AddNewUserResponse")]
        System.Threading.Tasks.Task<bool> AddNewUserAsync(string name, string password, string email, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationContract/GetCode", ReplyAction="http://tempuri.org/IAuthorizationContract/GetCodeResponse")]
        bool GetCode(string userName, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationContract/GetCode", ReplyAction="http://tempuri.org/IAuthorizationContract/GetCodeResponse")]
        System.Threading.Tasks.Task<bool> GetCodeAsync(string userName, int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorizationContractChannel : WPFClient.ProxyAuthorization.IAuthorizationContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizationContractClient : System.ServiceModel.ClientBase<WPFClient.ProxyAuthorization.IAuthorizationContract>, WPFClient.ProxyAuthorization.IAuthorizationContract {
        
        public AuthorizationContractClient() {
        }
        
        public AuthorizationContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorizationContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizationContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizationContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Join(string userName, string userPassword) {
            return base.Channel.Join(userName, userPassword);
        }
        
        public System.Threading.Tasks.Task<string> JoinAsync(string userName, string userPassword) {
            return base.Channel.JoinAsync(userName, userPassword);
        }
        
        public bool AddNewUser(string name, string password, string email, string phone) {
            return base.Channel.AddNewUser(name, password, email, phone);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewUserAsync(string name, string password, string email, string phone) {
            return base.Channel.AddNewUserAsync(name, password, email, phone);
        }
        
        public bool GetCode(string userName, int code) {
            return base.Channel.GetCode(userName, code);
        }
        
        public System.Threading.Tasks.Task<bool> GetCodeAsync(string userName, int code) {
            return base.Channel.GetCodeAsync(userName, code);
        }
    }
}
